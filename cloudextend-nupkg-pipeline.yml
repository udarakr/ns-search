# ASP.NET Core
# Build and test .NET Core NuGet projects and deploys them to GitHub Packages.
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# In the Pipeline editor, under the Variables tab, use Variable Groups linking to link $(GitHubPackagesPAT)
# from Azure Key Vault.

# If not created already, you need to create a Service Connection for the project as follows:
# Type: NuGet
# Name: GitHub Packages (Basic Auth)
# Feed URL: https://nuget.pkg.github.com/pro-celigo/index.json
# Username: pro-celigo
# Password: <Get this from "Azure DevOps - CloudExtend - GitHub Package Management PAT" secure note in LastPass>

pool:
    name: Azure Pipelines
    vmImage: 'ubuntu-latest'

steps:
- bash: |
    proj=$(Build.DefinitionName)
    echo "##vso[task.setvariable variable=TargetProject]$proj"
  displayName: 'Prepare Variables'

- bash: |
   echo '<?xml version="1.0" encoding="UTF-8"?><configuration>   <packageSources><add key="NuGet.org" value="https://api.nuget.org/v3/index.json" /><add key="GitHub" value="https://nuget.pkg.github.com/pro-celigo/index.json" /></packageSources><packageSourceCredentials><GitHub><add key="Username" value="pro-celigo" /><add key="ClearTextPassword" value="$(GitHubPackagesPAT)" /></GitHub></packageSourceCredentials></configuration>' > NuGet.config

  displayName: 'Bash Script'

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(TargetProject)/src/*.csproj'
    feedsToUse: config
    nugetConfigPath: NuGet.config

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(TargetProject)/src/*.csproj'
    arguments: '--configuration Release'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '$(TargetProject)/*[Tt]ests/*.csproj'
    arguments: '--configuration Release'

- task: DotNetCoreCLI@2
  displayName: 'NuGet Push'
  inputs:
    command: push
    packagesToPush: '$(Build.SourcesDirectory)/$(TargetProject)/**/*.nupkg;!$(Build.SourcesDirectory)/$(TargetProject)/**/*.symbols.nupkg'
    nuGetFeedType: external
    publishFeedCredentials: 'GitHub Packages (Basic Auth)'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

